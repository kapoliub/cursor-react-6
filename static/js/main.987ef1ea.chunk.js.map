{"version":3,"sources":["assets/img/verified-logo.svg","assets/img/arrow-logo.svg","assets/img/comment_icon.svg","assets/img/repost_icon.svg","assets/img/like_icon.svg","assets/img/share_icon.svg","components/Post.js","components/Posts.js","App.js","serviceWorker.js",".store/initialState.js",".store/store.js",".store/reducers/postsReducer.js","index.js"],"names":["module","exports","Post","author","post","postID","changeCommentsCount","changeRepostsCount","changeLikesCount","useState","isCommentClicked","setIsCommentClicked","isRepostClicked","setIsRepostClicked","isLikeClicked","setIsLikeClicked","className","src","photo","alt","name","verifiedIcon","nickname","date","arrowIcon","text","img","onClick","commentIcon","commentsCount","repostIcon","repostsCount","likeIcon","likesCount","shareIcon","connect","state","flags","output","i","postsPage","length","push","authorsList","dispatch","addNewPost","user","type","userID","isClicked","postText","setPostText","postImgUrl","setPostImgUrl","authorName","setAuthorName","changeHandler","e","target","value","onChange","placeholder","map","el","key","console","log","App","Boolean","window","location","hostname","match","initialState","store","createStore","combineReducers","action","currentUser","find","Date","toLocaleDateString","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.987ef1ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verified-logo.2019cadf.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-logo.1cd146fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.6344ee7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost_icon.a9a99fc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/like_icon.57c9a039.svg\";","module.exports = __webpack_public_path__ + \"static/media/share_icon.8e82847c.svg\";","import React, { useState } from \"react\";\nimport verifiedIcon from \"../assets/img/verified-logo.svg\";\nimport arrowIcon from \"../assets/img/arrow-logo.svg\";\nimport commentIcon from \"../assets/img/comment_icon.svg\";\nimport repostIcon from \"../assets/img/repost_icon.svg\";\nimport likeIcon from \"../assets/img/like_icon.svg\";\nimport shareIcon from \"../assets/img/share_icon.svg\";\n\nfunction Post({\n  author,\n  post,\n  postID,\n  changeCommentsCount,\n  changeRepostsCount,\n  changeLikesCount,\n}) {\n  const [isCommentClicked, setIsCommentClicked] = useState(false);\n  const [isRepostClicked, setIsRepostClicked] = useState(false);\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  const changeCommentsCountFunc = () => {\n    changeCommentsCount(postID, isCommentClicked);\n    setIsCommentClicked(!isCommentClicked);\n  };\n  const changeRepostsCountFunc = () => {\n    changeRepostsCount(postID, isRepostClicked);\n    setIsRepostClicked(!isRepostClicked);\n  };\n  const changeLikesCountFunc = () => {\n    changeLikesCount(postID, isLikeClicked);\n    setIsLikeClicked(!isLikeClicked);\n  };\n  return (\n    <div className=\"post\">\n      <div className=\"user-logo-block\">\n        <img src={author.photo} alt=\"user_logo\" />\n      </div>\n      <div className=\"post-info-block\">\n        <div className=\"text-block\">\n          <div className=\"post-info\">\n            <h4>{author.name}</h4>\n            <img src={verifiedIcon} alt=\"verified_icon\" />\n            <span>{`${author.nickname} Â· ${post.date}`}</span>\n            <img src={arrowIcon} alt=\"arrow_icon\" className=\"arrow-icon\" />\n          </div>\n          <div className=\"post-content\">\n            <p>{post.text}</p>\n          </div>\n        </div>\n        <div className=\"content-img-block\">\n          <img src={post.img} alt=\"post_img\" />\n        </div>\n        <div className=\"actions-block\">\n          <div className=\"action\" onClick={changeCommentsCountFunc}>\n            <img src={commentIcon} alt=\"action_icon\" />\n            <span>{post.commentsCount}</span>\n          </div>\n          <div className=\"action\" onClick={changeRepostsCountFunc}>\n            <img src={repostIcon} alt=\"action_icon\" />\n            <span>{post.repostsCount}</span>\n          </div>\n          <div className=\"action\" onClick={changeLikesCountFunc}>\n            <img src={likeIcon} alt=\"action_icon\" />\n            <span>{post.likesCount}</span>\n          </div>\n          <div className=\"action\">\n            <img src={shareIcon} alt=\"action_icon\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport Post from \"./Post\";\n\nconst mapState = (state) => {\n  let flags = [];\n  let output = [];\n  for (let i = 0; i < state.postsPage.length; i++) {\n    if (flags[state.postsPage[i].author.name]) continue;\n    flags[state.postsPage[i].author.name] = true;\n    output.push(state.postsPage[i].author.name);\n  }\n  return {\n    postsPage: state.postsPage,\n    authorsList: output,\n  };\n};\n\nconst mapDispatch = (dispatch) => ({\n  addNewPost(user) {\n    dispatch({\n      type: \"ADD_NEW_POST\",\n      user,\n    });\n  },\n  changeCommentsCount(userID, isClicked) {\n    dispatch({\n      type: \"CHANGE_COMMENTS_COUNT\",\n      userID,\n      isClicked,\n    });\n  },\n  changeRepostsCount(userID, isClicked) {\n    dispatch({\n      type: \"CHANGE_REPOSTS_COUNT\",\n      userID,\n      isClicked,\n    });\n  },\n  changeLikesCount(userID, isClicked) {\n    dispatch({\n      type: \"CHANGE_LIKES_COUNT\",\n      userID,\n      isClicked,\n    });\n  },\n});\n\nfunction Posts({\n  postsPage,\n  addNewPost,\n  authorsList,\n  changeCommentsCount,\n  changeRepostsCount,\n  changeLikesCount,\n}) {\n  const [postText, setPostText] = useState(\"\");\n  const [postImgUrl, setPostImgUrl] = useState(\"\");\n  const [authorName, setAuthorName] = useState(postsPage[0].author.name);\n\n  const changeHandler = (e) => {\n    if (e.target.name === \"post-text\") {\n      setPostText(e.target.value);\n    } else if (e.target.name === \"post-img-url\") {\n      setPostImgUrl(e.target.value);\n    } else if (e.target.name === \"author-name\") {\n      setAuthorName(e.target.value);\n    }\n  };\n\n  const user = {\n    name: authorName,\n    img: postImgUrl,\n    text: postText,\n  };\n\n  const addNewPostFunc = () => {\n    if (postText && postImgUrl && authorName) {\n      addNewPost(user);\n      setPostText(\"\");\n      setPostImgUrl(\"\");\n      setAuthorName(postsPage[0].author.name);\n    } else {\n      console.log(\"Check input data\");\n    }\n  };\n\n  return (\n    <div className=\"posts-page\">\n      <div>\n        <input\n          type=\"text\"\n          onChange={changeHandler}\n          name=\"post-text\"\n          value={postText}\n          placeholder=\"Post text\"\n        />\n        <input\n          type=\"text\"\n          onChange={changeHandler}\n          name=\"post-img-url\"\n          value={postImgUrl}\n          placeholder=\"Post image URL\"\n        />\n        <select onChange={changeHandler} name=\"author-name\" value={authorName}>\n          {authorsList.map((el, i) => (\n            <option key={i}>{el}</option>\n          ))}\n        </select>\n        <button onClick={addNewPostFunc}>Add new post</button>\n      </div>\n      <div>\n        {postsPage.map((el, i) => (\n          <Post\n            author={el.author}\n            post={el.post}\n            key={`${el.author.name}${i}`}\n            postID={i}\n            changeCommentsCount={changeCommentsCount}\n            changeRepostsCount={changeRepostsCount}\n            changeLikesCount={changeLikesCount}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default connect(mapState, mapDispatch)(Posts);\n","import React from \"react\";\nimport \"./App.css\";\nimport Posts from \"./components/Posts\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Posts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = [\n  {\n    author: {\n      name: \"Anakin Skywalker\",\n      photo: \"https://bit.ly/3iUZbG6\",\n      nickname: \"@dart_vader\",\n    },\n    post: {\n      date: \"26 ÑÐµÐ²Ñ.\",\n      text: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\n      img: \"https://bit.ly/2End5Sb\",\n      commentsCount: 482,\n      repostsCount: 146,\n      likesCount: 887,\n    },\n  },\n  {\n    author: {\n      name: \"Ray Skywalker\",\n      photo: \"https://bit.ly/32V1Slb\",\n      nickname: \"@ray_skysky\",\n    },\n    post: {\n      date: \"21 ÑÐ½Ð².\",\n      text: \"I`v got lightsaber!!!\",\n      img: \"https://bit.ly/2End5Sb\",\n      commentsCount: 345,\n      repostsCount: 124,\n      likesCount: 235,\n    },\n  },\n];\n\nexport default initialState;\n","import { combineReducers, createStore } from \"redux\";\nimport postsReducer from \"./reducers/postsReducer\";\n\nconst store = createStore(\n  combineReducers({\n    postsPage: postsReducer,\n  })\n);\n\nexport default store;\n","import initialState from \"../initialState\";\n\nexport default (store = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_NEW_POST\": {\n      let currentUser = store.find((el) => el.author.name === action.user.name);\n      return [\n        ...store,\n        {\n          author: {\n            name: action.user.name,\n            photo: currentUser.author.photo,\n            nickname: currentUser.author.nickname,\n          },\n          post: {\n            date: new Date().toLocaleDateString(),\n            text: action.user.text,\n            img: action.user.img,\n            commentsCount: 0,\n            repostsCount: 0,\n            likesCount: 0,\n          },\n        },\n      ];\n    }\n    case \"CHANGE_COMMENTS_COUNT\": {\n      action.isClicked\n        ? --store[action.userID].post.commentsCount\n        : ++store[action.userID].post.commentsCount;\n      return [...store];\n    }\n    case \"CHANGE_REPOSTS_COUNT\": {\n      action.isClicked\n        ? --store[action.userID].post.repostsCount\n        : ++store[action.userID].post.repostsCount;\n      return [...store];\n    }\n    case \"CHANGE_LIKES_COUNT\": {\n      action.isClicked\n        ? --store[action.userID].post.likesCount\n        : ++store[action.userID].post.likesCount;\n      return [...store];\n    }\n    default:\n      return initialState;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./.store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}